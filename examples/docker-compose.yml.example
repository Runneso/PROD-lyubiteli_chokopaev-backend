version: '3.9'

volumes:
  pgdata:
  redis:


services:
  gateway:
    build:
      context: ./teams/
    restart: always
    ports:
      - 8000:8000
    env_file:
      - docker/env/.env.prod
    depends_on:
      - postgres
      - redis
    networks:
      - olymp_network
    command: bash -c ""
    container_name: gateway_olymp_prod

  users:
    build:
      context: ./users/
    restart: always
    ports:
      - 8001:8000
    env_file:
      - docker/env/.env.prod
    depends_on:
      - postgres
      - redis
    networks:
      - olymp_network
    command: bash -c "alembic upgrade head & python ./users/main.py"
    container_name: users_olymp_prod

  events:
    build:
      context: ./events/
    restart: always
    ports:
      - 8002:8000
    env_file:
      - docker/env/.env.prod
    depends_on:
      - postgres
      - redis
    networks:
      - olymp_network
    command: bash -c "alembic upgrade head & python ./events/main.py"
    container_name: events_olymp_prod

  teams:
    build:
      context: ./teams/
    restart: always
    ports:
      - 8003:8000
    env_file:
      - docker/env/.env.prod
    depends_on:
      - postgres
      - redis
    networks:
      - olymp_network
    command: bash -c "alembic upgrade head & python ./teams/main.py"
    container_name: teams_olymp_prod

  nginx:
    image: nginx:stable-alpine
    restart: always
    working_dir: /app
    ports:
      - 80:80
    volumes:
      - ./docker/nginx/prod/:/etc/nginx/conf.d:ro
      - ./docker/certbot/conf:/etc/letsencrypt:ro
      - ./docker/certbot/www:/var/www/certbot:ro
    links:
      - gateway
    depends_on:
      - gateway
    container_name: nginx_olymp_prod

  postgres:
    image: postgres:alpine
    restart: always
    env_file:
      - docker/env/.env.prod
    volumes:
      - pgdata:/var/lib/postgresql/data/
    container_name: postgres_olymp_prod

  redis:
    image: redis:alpine
    restart: always
    command:
      - redis-server
    ports:
      - 6379:6379
    env_file:
      - docker/env/.env.prod
    volumes:
      - redis:/data
    container_name: redis_olymp_prod

  certbot:
    image: certbot/certbot
    volumes:
      - ./docker/certbot/conf:/etc/letsencrypt:rw
      - ./docker/certbot/www:/var/www/certbot:rw
    command: certonly --webroot --webroot-path=/var/www/certbot/ --email <your_email> --agree-tos --no-eff-email -d <domain (example.com)> -d <domain (www.example.com)>
    depends_on:
      - nginx
    container_name: certbot_olymp_prod
